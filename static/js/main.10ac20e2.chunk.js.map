{"version":3,"sources":["components/Header/Header.js","components/VideoRow/VideoRow.js","components/RecommendedVideos/RecommendedVideos.js","components/SearchPage/SearchPage.js","components/Video/Video.js","components/VideoInfo/VideoInfo.js","components/VideoPlayer/VideoPlayer.js","App.js","serviceWorker.js","index.js"],"names":["Header","useState","inputSearch","setInputSearch","setIsCovidLinkClicked","className","to","onClick","type","onChange","e","target","value","VideoRow","views","description","timestamp","channel","title","image","src","alt","RecommendedVideos","props","useParams","covidVideos","allVideos","totalPlayListsCount","setTotalPlayListsCount","playListsCurrentCount","setPlayListsCurrentCount","videosList","setVideosList","videoCards","setVideoCards","isLoading","setIsLoading","isError","setIsError","getPlayListsURL","process","getOnlyCovid19PlayListURL","getOnlyCovidVideos","getPlayListVideos","console","log","axios","get","then","response","createVideoCards","data","items","getVideosFromPlayList","catch","error","playLists","a","length","playList","playListId","id","count","videoItems","newVideoCards","video","videoId","contentDetails","snippet","channelId","channelImage","thumbnails","medium","url","DateTime","fromISO","publishedAt","toRelative","channelTitle","push","useEffect","Alert","severity","CircularProgress","color","map","item","SearchPage","searchQuery","videoRows","setVideoRows","videos","newVideoRows","createVideoRows","Video","VideoInfo","publishedDate","viewCount","likeCount","dislikeCount","subs","VideoPlayer","videoInfo","setVideoInfo","statistics","subscriberCount","Date","toLocaleDateString","day","month","year","createVideoInfo","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.10ac20e2.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './Header.css';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\n\r\nfunction Header () {\r\n\r\n    const [inputSearch, setInputSearch] = useState('');\r\n    const [isCovidLinkClicked, setIsCovidLinkClicked] = useState(false);\r\n\r\n    return (\r\n        <div className='header'>\r\n          <div className=\"header__left\">\r\n            HCA Videos Library\r\n          </div>\r\n          \r\n          <div className=\"header__center\">\r\n            <Link to={`/playlist/covidVideos`}>\r\n              <span className=\"pad_rt\" onClick={() => setIsCovidLinkClicked(true)} >\r\n                Covid 19 Videos\r\n              </span>\r\n            </Link>\r\n            <Link to={`/channel/allVideos`}>\r\n              All Videos\r\n            </Link>\r\n            \r\n          </div>\r\n\r\n          <div className=\"header__right\">\r\n            <div className=\"search_bar\">\r\n              <input type='text' onChange={(e) => setInputSearch(e.target.value)} value={inputSearch}/>\r\n              <Link to={`/search/${inputSearch}`}>\r\n                <SearchIcon className='header__searchbutton'/>\r\n              </Link>\r\n            </div>\r\n\r\n            <span>Welcome Lorel</span>\r\n          </div>\r\n          \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport './VideoRow.css';\r\n\r\nconst VideoRow = ({views, description, timestamp, channel, title, image}) => {\r\n    return (\r\n        <div className='videorow'>\r\n          <img src={image} alt=\"\" />\r\n          <div className=\"videorow__text\">\r\n              <h3>{title}</h3>\r\n              <p className='videorow__description'>\r\n                {description}\r\n              </p>\r\n              <p className='videorow__headline'>\r\n                {channel} • {timestamp}\r\n              </p>\r\n          </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default VideoRow;\r\n","import React, {useEffect, useState} from 'react';\r\nimport './RecommendedVideos.css';\r\nimport VideoRow from './../VideoRow/VideoRow';\r\nimport {useParams} from 'react-router';\r\nimport axios from 'axios';\r\nimport {DateTime} from 'luxon';\r\nimport { Link } from 'react-router-dom';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Alert from '@material-ui/lab/Alert';\r\n\r\n\r\nconst RecommendedVideos = (props) => {\r\n    let { covidVideos, allVideos } = useParams();\r\n    const [totalPlayListsCount, setTotalPlayListsCount] = useState(0);\r\n    const [playListsCurrentCount, setPlayListsCurrentCount] = useState(0);\r\n    const [videosList, setVideosList] = useState([]);\r\n    const [videoCards, setVideoCards] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [isError, setIsError] = useState(false);\r\n    const getPlayListsURL = `https://www.googleapis.com/youtube/v3/playlists?part=snippet,contentDetails&channelId=UCL03ygcTgIbe36o2Z7sReuQ&maxResults=50&key=${process.env.REACT_APP_YOUTUBE_API_KEY}`;\r\n    const getOnlyCovid19PlayListURL = `https://www.googleapis.com/youtube/v3/playlistItems?part=snippet,contentDetails&key=${process.env.REACT_APP_YOUTUBE_API_KEY}&maxResults=20&playlistId=PLogA9DP2_vSekxHP73PXaKD6nbOK56CJw`;\r\n    const getOnlyCovidVideos = !!(covidVideos);\r\n\r\n    /*****USEEFFECT-HOOK*****\r\n     * To trigger getPlayListVideos function when there is a state change in covidVideos, allVideos state\r\n    */\r\n   useEffect(() => {\r\n    getPlayListVideos();\r\n  }, [covidVideos, allVideos]);\r\n  \r\n    /*****USEEFFECT-HOOK*****\r\n     * To trigger getPlayListVideos function when this component is loaded\r\n    */\r\n    useEffect(() => {\r\n      getPlayListVideos();\r\n    }, []);\r\n\r\n    /*****USEEFFECT-HOOK*****\r\n     * To trigger createVideoCards function when there is a state change in videosList or playListsCurrentCount.\r\n    */\r\n    useEffect(() => {\r\n      if(playListsCurrentCount > 0 && playListsCurrentCount === totalPlayListsCount) {\r\n        setTotalPlayListsCount(0);\r\n        createVideoCards(videosList);\r\n      }\r\n    }, [videosList,playListsCurrentCount])\r\n    /*****Function*****\r\n     * parameters: none\r\n     * Info: calls an api to get playlist details in a youtube channel\r\n    */\r\n    function getPlayListVideos() {\r\n      console.log(\"hello------------------>\", getOnlyCovidVideos);\r\n      axios\r\n      .get(getOnlyCovidVideos ? getOnlyCovid19PlayListURL : getPlayListsURL)\r\n      .then(response => {\r\n        getOnlyCovidVideos ? \r\n          createVideoCards(response.data.items) : \r\n          getVideosFromPlayList(response.data.items);\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n        setIsError(true);\r\n      })\r\n    }\r\n    /*****Function*****\r\n     * parameters: playLists - list of details from youtube playlists called from getPlayListVideos function\r\n     * Info: calls an api to get list of all video details in an array from an youtube channel\r\n    */\r\n    async function getVideosFromPlayList(playLists) {\r\n      setIsLoading(true);\r\n      setPlayListsCurrentCount(0);\r\n      setTotalPlayListsCount(playLists.length);\r\n      for (const playList of playLists) {\r\n        const playListId = playList.id;\r\n        await axios\r\n                .get(`https://www.googleapis.com/youtube/v3/playlistItems?part=snippet,contentDetails&maxResults=25&playlistId=${playListId}&key=${process.env.REACT_APP_YOUTUBE_API_KEY}`)\r\n                .then(response => {\r\n                  setPlayListsCurrentCount(count => count+1);\r\n                  setVideosList([\r\n                    ...videosList,\r\n                    ...response.data.items\r\n                  ]);\r\n                })\r\n                .catch(error => {\r\n                  console.log(error);\r\n                  setIsError(true);\r\n                });\r\n      }\r\n    }\r\n    /*****Function*****\r\n     * parameters: videoItems - list of all video details in an array.\r\n     * Info: calls an api to get details of each video available in videoItems parameter\r\n    */\r\n    async function createVideoCards(videoItems) {\r\n      let newVideoCards = [];\r\n      for (const video of videoItems) {\r\n        const videoId = video.contentDetails.videoId;\r\n        const snippet = video.snippet;\r\n        const channelId = snippet.channelId;\r\n        const response = await axios\r\n                              .get(`https://www.googleapis.com/youtube/v3/channels?part=snippet&id=UCL03ygcTgIbe36o2Z7sReuQ&key=${process.env.REACT_APP_YOUTUBE_API_KEY}`)\r\n        const channelImage = response.data.items[0].snippet.thumbnails.medium.url;\r\n\r\n        const title = snippet.title;\r\n        const image = snippet.thumbnails.medium.url;\r\n        const timestamp = DateTime.fromISO(snippet.publishedAt).toRelative();\r\n        const channel = snippet.channelTitle;\r\n        const description = snippet.description;\r\n\r\n        newVideoCards.push({\r\n          videoId,\r\n          image,\r\n          title,\r\n          channel,\r\n          timestamp,\r\n          channelImage,\r\n          description\r\n        });\r\n      };\r\n      setVideoCards(newVideoCards);\r\n      setIsLoading(false);\r\n    }\r\n\r\n    if(isError) {\r\n      return <Alert severity=\"error\" className='loading'>No Results found!</Alert>\r\n    }\r\n    return (\r\n        \r\n        <div className='recommendedvideos'>\r\n            { isLoading ? <CircularProgress className='loading' color='secondary' /> : null }\r\n            <div className=\"recommendedvideos__videos\">\r\n                {\r\n                  videoCards.map(item => {\r\n                    return (\r\n                            <Link key={item.videoId} to={`/video/${item.videoId}`}>\r\n                              <VideoRow\r\n                                title={item.title}\r\n                                image={item.image}\r\n                                timestamp={item.timestamp}\r\n                                channel={item.channel}\r\n                                description={item.description}\r\n                              />\r\n                            </Link>\r\n                    )\r\n                  })\r\n                }\r\n            </div>\r\n            <div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RecommendedVideos;\r\n","import React, {useState, useEffect} from 'react';\r\nimport \"./SearchPage.css\";\r\nimport TuneIcon from '@material-ui/icons/Tune';\r\nimport VideoRow from './../VideoRow/VideoRow';\r\nimport {useParams} from 'react-router';\r\nimport axios from 'axios';\r\nimport {DateTime} from 'luxon';\r\nimport { Link } from 'react-router-dom';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Alert from '@material-ui/lab/Alert';\r\n\r\n\r\nconst SearchPage = (props) => {\r\n    let { searchQuery } = useParams();\r\n    const [videoRows, setVideoRows] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [isError, setIsError] = useState(false);\r\n    /*****USEEFFECT-HOOK*****\r\n     * To trigger getPlayListVideos function when this searchQuery parameter changes\r\n    */\r\n    useEffect(() => {\r\n      setVideoRows([]);\r\n        axios\r\n        .get(`https://youtube.googleapis.com/youtube/v3/search?part=snippet&channelId=UCL03ygcTgIbe36o2Z7sReuQ&maxResults=25&q=${searchQuery}&key=${process.env.REACT_APP_YOUTUBE_API_KEY}`)\r\n        .then(response => {\r\n          createVideoRows(response.data['items']);\r\n          setIsError(false);\r\n        })\r\n        .catch(error => {\r\n          console.log(error);\r\n          setIsError(true);\r\n          setIsLoading(false);\r\n        })\r\n\r\n    }, [searchQuery])\r\n\r\n    /*****Function*****\r\n     * parameters: videos - list of all videos return from search results.\r\n     * Info: format data to display result list.\r\n    */\r\n    async function createVideoRows(videos) {\r\n      let newVideoRows = [];\r\n      for (const video of videos) {\r\n        const videoId = video.id.videoId;\r\n        const snippet = video.snippet;\r\n        const title = snippet.title;\r\n        const timestamp = DateTime.fromISO(snippet.publishedAt).toRelative();\r\n        const channel = snippet.channelTitle;\r\n        const description = snippet.description;\r\n        const image = snippet.thumbnails.medium.url;\r\n\r\n        newVideoRows.push({\r\n          videoId,\r\n          title,\r\n          image,\r\n          timestamp,\r\n          channel, \r\n          description\r\n        });\r\n      };\r\n      setVideoRows(newVideoRows);\r\n      setIsLoading(false);\r\n    }\r\n    if (isError) {\r\n      return <Alert severity=\"error\" className='loading'>No Results found!</Alert>\r\n    }\r\n    return (\r\n        <div className=\"searchpage\">\r\n            { isLoading ? <CircularProgress className='loading' color='secondary' /> : null }\r\n            <hr />\r\n            {\r\n              videoRows.map(item => {\r\n                return (\r\n                        <Link key={item.videoId} to={`/video/${item.videoId}`}>\r\n                          <VideoRow\r\n                            title={item.title}\r\n                            image={item.image}\r\n                            timestamp={item.timestamp}\r\n                            channel={item.channel}\r\n                            description={item.description}\r\n                          />\r\n                        </Link>\r\n                )\r\n              })\r\n              \r\n            }   \r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchPage;\r\n","import React from 'react';\r\nimport YouTube from 'react-youtube';\r\n\r\nconst Video = ({videoId}) => {\r\n    return (\r\n        <div>\r\n          <YouTube\r\n            videoId={videoId}\r\n          />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Video;\r\n","import React from 'react';\r\nimport './VideoInfo.css';\r\n\r\nconst VideoInfo = ({title, description, publishedDate, channelTitle, channelImage, viewCount, likeCount, dislikeCount, subs}) => {\r\n    return (\r\n        <div className='videoinfo'>\r\n            <div className='videoinfo__headline'>\r\n                <h1>{title}</h1>\r\n            </div>\r\n            <div className='videoinfo__stats'>\r\n                <p>Published On: {publishedDate}</p>\r\n            </div>\r\n            <hr />\r\n            <div className='videoinfo__channeldesc'>\r\n                <p>{description}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default VideoInfo;\r\n","import React, { useState, useEffect } from 'react';\r\nimport {useParams} from 'react-router';\r\nimport Video from './../Video/Video'\r\nimport './VideoPlayer.css';\r\nimport RecommendedVideos from '../RecommendedVideos/RecommendedVideos';\r\nimport VideoInfo from '../VideoInfo/VideoInfo';\r\nimport axios from 'axios';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Alert from '@material-ui/lab/Alert';\r\n\r\nconst VideoPlayer = () => {\r\n    let { videoId } = useParams();\r\n\r\n    const [videoInfo, setVideoInfo] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [isError, setIsError] = useState(false);\r\n    /*****USEEFFECT-HOOK*****\r\n     * To trigger createVideoCards function when there is a state change in videoId state.\r\n    */\r\n    useEffect(() => {\r\n        setVideoInfo([]);\r\n        setIsLoading(true);\r\n        axios\r\n          .get(`https://www.googleapis.com/youtube/v3/videos?part=snippet%2C%20statistics&id=${videoId}&key=${process.env.REACT_APP_YOUTUBE_API_KEY}`)\r\n          .then(response => {\r\n              if(response.data && response.data['items'] && response.data['items'][0]){\r\n                createVideoInfo(response.data['items'][0]);\r\n              }\r\n              setIsError(false);\r\n          })\r\n          .catch(error => {\r\n              console.log(error);\r\n              setIsError(true);\r\n          })\r\n    }, [videoId])\r\n    /*****Function*****\r\n     * parameters: video - details of a video\r\n     * Info: calls an api to get all properties of video and display\r\n    */\r\n    async function createVideoInfo (video) {\r\n        const snippet = video.snippet;\r\n        const stats = video.statistics;\r\n        const channelId = snippet.channelId;\r\n        const response = await axios\r\n                              .get(`https://www.googleapis.com/youtube/v3/channels?part=snippet%2C%20statistics&id=${channelId}&key=${process.env.REACT_APP_YOUTUBE_API_KEY}`)\r\n        \r\n        const channelImage = response.data.items[0].snippet.thumbnails.medium.url;\r\n        const subs = response.data.items[0].statistics.subscriberCount;\r\n        const publishedDate = new Date(snippet.publishedAt).toLocaleDateString('en-GB', {  \r\n                                                                day : 'numeric',\r\n                                                                month : 'short',\r\n                                                                year : 'numeric'\r\n                                                            });\r\n        const title = snippet.title;\r\n        const description = snippet.description;\r\n        const channelTitle = snippet.channelTitle;\r\n\r\n        setVideoInfo({\r\n            title,\r\n            description,\r\n            publishedDate,\r\n            channelTitle,\r\n            channelImage,\r\n        });\r\n        setIsLoading(false);\r\n    }\r\n    if(isError) {\r\n        return <Alert severity=\"error\" className='loading'>No Results found!</Alert>\r\n    }\r\n    return (\r\n        <div className='videoplayer'>\r\n            <div className='videoplayer__videodetails'>\r\n                <div className='videoplayer__video'>\r\n                    {isLoading ? <CircularProgress className='loading' color='secondary'/> : <Video videoId={videoId} /> }\r\n                </div>\r\n                <div className='videoplayer__videoinfo'>\r\n                    {!isLoading ? <VideoInfo\r\n                                    title={videoInfo.snippet}\r\n                                    description={videoInfo.description}\r\n                                    publishedDate={videoInfo.publishedDate}\r\n                                    channelTitle={videoInfo.channelTitle}\r\n                                    channelImage={videoInfo.channelImage}\r\n                                  /> : null\r\n                    }\r\n                </div>\r\n            </div>\r\n            <div className='videoplayer__suggested'>\r\n                Recomended Videos: TODO\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default VideoPlayer;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Header from './components/Header/Header';\r\nimport RecommendedVideos from './components/RecommendedVideos/RecommendedVideos';\r\nimport SearchPage from './components/SearchPage/SearchPage';\r\nimport VideoPlayer from './components/VideoPlayer/VideoPlayer';\r\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom';\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Router>\r\n      <Header />\r\n        <Switch>\r\n          <Route path='/video/:videoId'>\r\n            <div className=\"app__mainpage\">\r\n              <VideoPlayer />\r\n            </div>\r\n          </Route>\r\n          <Route path='/search/:searchQuery'>\r\n            <div className=\"app__mainpage\">\r\n              <SearchPage />\r\n            </div>\r\n          </Route>\r\n          <Route path='/playlist/:covidVideos'>\r\n            <div className=\"app__mainpage\">\r\n              <RecommendedVideos />\r\n            </div>\r\n          </Route>\r\n          <Route path='/channel/:allVideos'>\r\n            <div className=\"app__mainpage\">\r\n              <RecommendedVideos />\r\n            </div>\r\n          </Route>\r\n          <Route path='/'>\r\n            <div className=\"app__mainpage\">\r\n              <RecommendedVideos />\r\n            </div>\r\n          </Route>\r\n          \r\n        </Switch>\r\n      </Router>\r\n\r\n\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}